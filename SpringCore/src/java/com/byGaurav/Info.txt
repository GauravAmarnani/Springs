Information about all the packages : 

_________________________________________________________________________________________________________
Spring Framework : # Creates Objects for us.
		   # Manages Objects for us.

_________________________________________________________________________________________________________
Internal Functioning : 
	
	IOC Container				Config file 	   
	1. A class.		Reads		1. Object a.
	2. B class.		--------->	2. Object b.
	3. C class.				3. Object c.

_________________________________________________________________________________________________________
* All the Objects that Spring creates and manages inside the IOC Container are called as Beans.

_________________________________________________________________________________________________________
* To get Objects (beans) --> getBean("Bean id name.");

_________________________________________________________________________________________________________
* 2 Types of IOC Containers : 
	1. BeanFactory. 	|Both are 
	2. ApplicationContext.	|Interfaces.

_________________________________________________________________________________________________________
* Note : BeanFactory is a bit outdated so we normally use ApplicationContext Interface.

_________________________________________________________________________________________________________
* Note : As both are Interfaces , for us to implement we have to use class 
	 "ClassPathXmlApplicationContext" provided by Spring.

_________________________________________________________________________________________________________
* Config file (xml) : 
	<bean id="airtel" class="com.byGaurav.basicBeanObject.Airtel"> </bean>
	Note that by this line Default Constructor of the Class Airtel will be called.

_________________________________________________________________________________________________________
* This line will result in creation of a bean object "airtel" in the IOC Container.

_________________________________________________________________________________________________________
* To get this bean object airtel : 
	ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
	Airtel airtel = context.getBean("airtel" , Airtel.class);

_________________________________________________________________________________________________________
* Note : spring-beans.xsd in xml helps in validating tags in xml.

_________________________________________________________________________________________________________
* Note : When ClassPathXmlApplicationContext("filename.xml") is called xml file reads and creates objects
	 at that particular instance itself.

_________________________________________________________________________________________________________

The following is the information on the Annotations used in the packages : 

_________________________________________________________________________________________________________

1. @Component		: Used before the class whose Object we want Spring to create for us.
2. @ComponentScan	: Used before the Configuration file/ <context:Component-Scan/> in xml file.
			  Here we pass arugment of packages from which it scans for the @Component tag 
			  and if it finds any , it creates Object for that class.
			  @ComponentScan(basePackages : "package1" , "package2" ...)
3. @Configuration	: Used before a java class to make it a configuration file like xml.
4. @Bean		: Used to create a Bean Object for the class in the following way : 
			  @Configuration
			  public class JavaConfig 
			  {
				  @Bean
				  public ObjectClass methodName() {
					  ObjectClass objectName = new ObjectClass();
					  return objectName;
				  }
			  }
			  //@Configuration to declare it as a configuration file.
			  //ObjectClass is the name of the class whose Object we want to create.
			  //methodName will bydefault be the bean id.
			  //It is basically manually creating a Java Object and returning it.
5. @Primary		: To define one class as first choice. Like if we create Object for an Interface 
			  and don't specify for which class exactly. 
6. @Value		: To enter value for a property manually. 
			  @Value("Gaurav Amarnani")
			  private String name;
			  //The approach followed below is for Property file.
			  @Value("{name}")
			  private String name;
7. @Required		: To make it compulsory for a dependency to not have a null value.
			  @Required
			  private String name;
8. @Autowire		: 
9. @Qualifier		: 
10.@PostConstruct	: 
11.@PreDestroy		: 
12.@Scope		: 
13.@PropertySource	: ("classpath:filename.properties")

_________________________________________________________________________________________________________

Difference between close() and registerShutdownHook().

_________________________________________________________________________________________________________

